#!/usr/bin/env python3

import os
import sys
import getopt
import hmac
import hashlib
import urllib.request
import urllib.parse
import json
import getpass

class blih:
    def __init__(self, baseurl='https://blih.epitech.eu/', user=None, token=None, async=True, verbose=False):
        self._baseurl = baseurl
        if token:
            self._token = token
        else:
            self.token_calc()
        if user == None:
            self._user = getpass.getuser()
        else:
            self._user = user
        self._async = async
        self._verbose = verbose

    def token_get(self):
        return self._token

    def token_set(self, token):
        self._token = token

    token = property(token_get, token_set)

    def token_calc(self):
        passwd = getpass.getpass()
        self._token = bytes(hashlib.sha512(bytes(passwd, 'utf8')).hexdigest(), 'utf8')

    def sign_data(self, data=None):
        signature = hmac.new(self._token, msg=bytes(self._user, 'utf8'), digestmod=hashlib.sha512)
        if data:
            signature.update(bytes(json.dumps(data, sort_keys=True, indent=4, separators=(',', ': ')), 'utf8'))

        signed_data = {'user' : self._user, 'signature' : signature.hexdigest()}
        if data != None:
            signed_data['data'] = data

        return signed_data

    def request(self, resource, method='GET', content_type='application/json', data=None, url=None):
        signed_data = self.sign_data(data)

        if url:
            req = urllib.request.Request(url=url, method=method, data=bytes(json.dumps(signed_data), 'utf8'))
        else:
            req = urllib.request.Request(url=self._baseurl + resource, method=method, data=bytes(json.dumps(signed_data), 'utf8'))
        req.add_header('Content-Type', content_type)

        try:
            f = urllib.request.urlopen(req)
        except urllib.error.HTTPError as e:
            return (e.code, e.reason, None, None)

        return (f.status, f.reason, f.info(), f.read())

    def repo_create(self, name, type='git', description=None):
        data = {'name' : name, 'type' : type}
        if description:
            data['description'] = description
        status, reason, headers, data = self.request('user/repositories', method='POST', data=data)
        if self._verbose or status != 202:
            print (str(status) + ' ' + reason)
        if status != 202:
            sys.exit(1)

        try:
            headers['Location']
            print ('Repository URL : ' + headers['Location'])
        except KeyError:
            print ('Unknown error')

    def repo_list(self):
        status, reason, headers, data = self.request('user/repositories', method='GET')
        if self._verbose or status != 200:
            print (str(status) + ' ' + reason)
        if data:
            list = json.loads(data.decode('utf8'))
            for i in list['repositories']:
                print (i)

    def repo_info(self, name):
        status, reason, headers, data = self.request('user/repositories/' + name, method='GET')
        if self._verbose or status != 200:
            print (str(status) + ' ' + reason)
        print (data)

    def repo_setacl(self, name, acluser, acl):
        data = {'user' : acluser, 'acl' : acl}
        status, reason, headers, data = self.request('user/repositories/' + name + '/acl', method='POST', data=data)
        if self._verbose or status != 200:
            print (str(status) + ' ' + reason)
        if status != 200:
            sys.exit(1)

    def repo_getacl(self, name):
        status, reason, headers, data = self.request('user/repositories/' + name + '/acl', method='GET')
        if self._verbose or status != 200:
            print (str(status) + ' ' + reason)
        if status != 200:
            sys.exit(1)
        list = json.loads(data.decode('utf8'))
        for i in list.keys():
            print (i + ':' + list[i])

    def sshkey_upload(self, keyfile):
        try:
            f = open(keyfile, 'r')
        except (PermissionError, FileNotFoundError):
            print ("Can't open file : " + keyfile)
            return
        key = urllib.parse.quote(f.read().strip('\n'))
        f.close()
        data = {'sshkey' : key}
        status, reason, headers, data = self.request('user/sshkey', method='POST', data=data)
        if self._verbose or status != 200:
            print (str(status) + ' ' + reason)
        if status != 200:
            sys.exit(1)

    def sshkey_list(self):
        status, reason, headers, data = self.request('user/sshkey', method='GET')
        if self._verbose or status != 200:
            print (str(status) + ' ' + reason)
        if status != 200:
            sys.exit(1)
        sshkeys = json.loads(data.decode('utf8'))
        for i in sshkeys.keys():
            print (sshkeys[i] + ' ' + i)

    def sshkey_delete(self, key):
        data = {'sshkey' : key}
        status, reason, headers, data = self.request('user/sshkey/' + key, method='DELETE', data=data)
        if self._verbose or status != 200:
            print (str(status) + ' ' + reason)
        if status != 200:
            sys.exit(1)

def usage_repository():
    print ('Usage: ' + sys.argv[0] + ' [options] repository command ...')
    print ()
    print ('Commands :')
    print ('\tcreate repo\t\t\t-- Create a repository named "repo"')
    print ('\tinfo repo\t\t\t-- Get the repository metadata')
    print ('\tgetacl repo\t\t\t-- Get the acls set for the repository')
    print ('\tlist\t\t\t\t-- List the repositories created')
    print ('\tsetacl repo user [acl]\t\t-- Set (or remove) an acl for "user" on "repo"')
    print ('\t\t\t\t\tACL format:')
    print ('\t\t\t\t\tr for read')
    print ('\t\t\t\t\tw for write')
    print ('\t\t\t\t\ta for admin')
    sys.exit(1)

def repository(args, baseurl, user, verbose, async):
    if len(args) == 0:
        usage_repository()
    if args[0] == 'create':
        if len(args) != 2:
            usage_repository()
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.repo_create(args[1])
    elif args[0] == 'list':
        if len(args) != 1:
            usage_repository()
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.repo_list()
    elif args[0] == 'info':
        if len(args) != 2:
            usage_repository()
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.repo_info(args[1])
    elif args[0] == 'setacl':
        if len(args) != 4 and len(args) != 3:
            usage_repository()
        if len(args) == 3:
            acl = ''
        else:
            acl = args[3]
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.repo_setacl(args[1], args[2], acl)
    elif args[0] == 'getacl':
        if len(args) != 2:
            usage_repository()
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.repo_getacl(args[1])
    else:
        usage_repository()

def usage_sshkey():
    print ('Usage: ' + sys.argv[0] + ' [options] sshkey command ...')
    print ()
    print ('Commands :')
    print ('\tupload [file]\t\t\t-- Upload a new ssh-key')
    print ('\tlist\t\t\t\t-- List the ssh-keys')
    sys.exit(1)

def sshkey(args, baseurl, user, verbose, async):
    if len(args) == 0:
        usage_sshkey()
    if args[0] == 'list':
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.sshkey_list()
    elif args[0] == 'delete':
        key = args[1]
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.sshkey_delete(key)
    elif args[0] == 'upload':
        key = None
        if len(args) == 1:
            key = os.getenv('HOME') + '/.ssh/id_rsa.pub'
        elif len(args) == 2:
            key = args[1]
        else:
            usage_sshkey()
        handle = blih(baseurl=baseurl, user=user, async=async, verbose=verbose)
        handle.sshkey_upload(key)
    else:
        usage_sshkey()

def usage():
    print ('Usage: ' + sys.argv[0] + ' [options] command ...')
    print ()
    print ('Global Options :')
    print ('\t-u user | --user=user\t\t-- Run as user')
    print ('\t-v | --verbose\t\t\t-- Verbose')
    print ('\t-b url | --baseurl=url\t\t-- Base URL for BLIH')
    print ('\t-s | --sync\t\t\t-- Work in syncronous mode')
    print ()
    print ('Commands :')
    print ('\trepository\t\t\t-- Repository management')
    print ('\tsshkey\t\t\t\t-- SSH-KEYS management')
    sys.exit(1)

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hvsu:b:', ['help', 'verbose', 'sync', 'user=', 'baseurl='])
    except getopt.GetoptError as e:
        print (e)
        usage()

    verbose = False
    user = None
    async = True
    baseurl = 'https://blih.epitech.eu/'

    for o, a in opts:
        if o in ('-h', '--help'):
            usage()
        elif o in ('-v', '--verbose'):
            verbose = True
        elif o in ('-u', '--user'):
            user = a
        elif o in ('-s', '--sync'):
            async = False
        elif o in ('-b', '--baseurl'):
            baseurl = a
        else:
            usage()

    if len(args) == 0:
        usage()

    if args[0] == 'repository':
        repository(args[1:], baseurl, user, verbose, async)
    elif args[0] == 'sshkey':
        sshkey(args[1:], baseurl, user, verbose, async)
    else:
        usage()
